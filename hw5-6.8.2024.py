# hw5:

def remove_key_from_dict(dictionary: dict):
    dictionary.popitem();

def clear_all(dictionary: dict):
    dictionary = { };

a = {'x': 1, 'y': 2};
remove_key_from_dict(a);
print(a);
clear_all(a);
print(a);

# Question 1:        dict_from_key_remove האם המילון שנשלח לפונקציה ()
                                            # ישתנה? ישאר זהה? מדוע?
# Answer 1:                                                                   : remove_key_from_dict פונקציה
                                              # היא מסירה ערך אחד מהמילון באמצעות המתודה popitem(),
#                          שמסירה ומחזירה את הזוג מפתח-ערך האחרון שנוסף למילון. מאחר שהמילון הוא  (mutable),
                                    # השינויים שנעשים בתוכו בתוך הפונקציה ישפיעו על המילון גם מחוץ לפונקציה.
#                 לכן, כשמפעילים את remove_key_from_dict(a) על המילון a, המילון אכן ישתנה ויאבד מפתח-ערך אחד

# Question 2:                         all_clear האם המילון ()
#                       שנשלח לפונקציה ישתנה? ישאר זהה? מדוע?
# Answer 2:                                                                    dictionary הפונקציה
#                                                  מגדירה את המשתנה  מחדש כאובייקט ריק {}. עם זאת,
#                    המשתנה dictionary בפונקציה הוא בעצם עותק של ההפניה לאובייקט המקורי (המילון a)
#                                                         כשעושים השמה (assignment) בתוך הפונקציה,
#                                        היא משנה רק את ההפניה המקומית, ולא את המילון המקורי עצמו.
#               לכן, הקריאה ל-clear_all(a) לא תשפיע על המילון a מחוץ לפונקציה, והוא יישאר כפי שהוא

# Question 3:         איך אפשר לנקות את המילון מערכים בתוך פונקציה כך שזה כן ישפיע על המילון מבחוץ?
# Answer 3:
# כדי לנקות את המילון מתוך הפונקציה באופן שישפיע גם על המילון מחוץ לפונקציה,
#      ניתן להשתמש במתודה clear(), אשר מסירה את כל הערכים מתוך המילון המקורי:

def clear_all(dictionary: dict):
    dictionary.clear();

a = {'x': 1, 'y': 2};
clear_all(a);
print(a);

# Output: {}